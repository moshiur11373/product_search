{
  "_args": [
    [
      {
        "raw": "bestbuy",
        "scope": null,
        "escapedName": "bestbuy",
        "name": "bestbuy",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\mrahman\\Documents\\AngularJS\\product_search"
    ]
  ],
  "_from": "bestbuy@latest",
  "_id": "bestbuy@1.1.0",
  "_inCache": true,
  "_location": "/bestbuy",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/bestbuy-1.1.0.tgz_1493681083573_0.22360329143702984"
  },
  "_npmUser": {
    "name": "flet",
    "email": "flettre@gmail.com"
  },
  "_npmVersion": "3.10.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bestbuy",
    "scope": null,
    "escapedName": "bestbuy",
    "name": "bestbuy",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/bestbuy/-/bestbuy-1.1.0.tgz",
  "_shasum": "681c88c023db7e15643df91c3939748db36111e2",
  "_shrinkwrap": null,
  "_spec": "bestbuy",
  "_where": "C:\\Users\\mrahman\\Documents\\AngularJS\\product_search",
  "author": {
    "name": "Ian Felton",
    "email": "ian@ianfelton.com"
  },
  "bugs": {
    "url": "https://github.com/BestBuyAPIs/bestbuy-sdk-js/issues"
  },
  "contributors": [
    {
      "name": "Eric Caron",
      "email": "eric.caron@gmail.com",
      "url": "http://ericcaron.com/"
    },
    {
      "name": "Dan Flettre",
      "email": "flettre@gmail.com"
    }
  ],
  "dependencies": {
    "bluebird": "^3.0.5",
    "lodash.assign": "^4.2.0",
    "request": "^2.79.0",
    "request-debug": "^0.2.0",
    "request-promise": "^4.1.1"
  },
  "description": "High level node.js client for the Best Buy API.",
  "devDependencies": {
    "coveralls": "^2.11.4",
    "istanbul": "^0.4.0",
    "semistandard": "^9.2.1",
    "tap-spec": "^4.1.1",
    "tape": "^4.6.3",
    "tape-nock": "^1.4.0"
  },
  "directories": {},
  "dist": {
    "shasum": "681c88c023db7e15643df91c3939748db36111e2",
    "tarball": "https://registry.npmjs.org/bestbuy/-/bestbuy-1.1.0.tgz"
  },
  "gitHead": "47490abea7b840d396264244f3a97bd68e374e32",
  "homepage": "https://github.com/BestBuyAPIs/bestbuy-sdk-js",
  "keywords": [
    "bestbuy",
    "api",
    "retail",
    "electronics",
    "product reviews"
  ],
  "license": "MIT",
  "main": "bestbuy.js",
  "maintainers": [
    {
      "name": "ecaron",
      "email": "eric.caron@gmail.com"
    },
    {
      "name": "flet",
      "email": "flettre@gmail.com"
    }
  ],
  "name": "bestbuy",
  "optionalDependencies": {},
  "readme": "# Best Buy API\nThis is a high-level JavaScript / Node.js helper for the [Best Buy developer API](https://developer.bestbuy.com/).\n\n[![npm package](https://nodei.co/npm/bestbuy.png)](https://nodei.co/npm/bestbuy/)\n\n[![Build status](https://img.shields.io/travis/BestBuyAPIs/bestbuy-sdk-js.svg?style=flat-square)](https://travis-ci.org/BestBuyAPIs/bestbuy-sdk-js)\n[![Coverage Status](https://coveralls.io/repos/BestBuyAPIs/bestbuy-sdk-js/badge.svg?branch=master&service=github)](https://coveralls.io/github/BestBuyAPIs/bestbuy-sdk-js?branch=master)\n[![Dependency Status](https://david-dm.org/BestBuyAPIs/bestbuy-sdk-js.svg)](https://david-dm.org/BestBuyAPIs/bestbuy-sdk-js)\n\nThe [examples](examples/) folder contains code that demonstrates how to include the module and initialize it with your Best Buy developer key and then programmatically call the API.\n\nExample of including the NPM module:\n\nPre-ES6 with explicit initialization\n\n```js\n    var bby = require('bestbuy')(\"your_BBY_API_KEY\");\n```\n\nIn addition to the examples, the package contains a suite of Jasmine tests to further show how to use the helper in more ways.\n\n\n## Getting Started\n 1. Sign-up for a developer API Key at https://developer.bestbuy.com/\n 2. Run `npm install bestbuy --save`\n    * Alternatively you can just add `\"bestbuy\": \"1.*\"` inside of the *dependencies* part of your `package.json` file\n 3. The library requires an API key to be provided before it can be used. You can set that in one of three ways:\n    * Set an environment variable of `BBY_API_KEY` to your key and invoke the method<br>\n      `var bby = require('bestbuy')();`\n    * Send the key in as a string when invoking the method<br>\n      `var bby = require('bestbuy')('YOURKEY');`\n    * Send the key in as part of an object when invoking the method<br>\n      `var bby = require('bestbuy')({'key': 'YOURKEY'});`\n\n\n## Documentation\n\n - [`availability`](#availability)\n - [`categories`](#categories)\n - [`openBox`](#openbox)\n - [`products`](#products)\n - [`recommendations`](#recommendations)\n - [`reviews`](#reviews)\n - [`stores`](#stores)\n - [`warranties`](#warranties)\n\nIn our documentation, we'll use a couple actual examples:\n\n - Whenever a SKU is referenced, we'll use `4312001`, which is the [Star Wars Episode IV: A New Hope (Blu-ray)](http://www.bestbuy.com/site/batman-begins-blu-ray-disc/4312001.p?id=48254&skuId=4312001)\n - Whenever a Store ID is referenced, we'll use `611` and `482`, which are respectfully the Best Buy stores by corporate headquarters and in New York where [Chloe](https://www.youtube.com/watch?v=rxTQxo6gKd4) works.\n\n_More examples are available in the [examples](examples/) directory_\n\n\n### availability\n#### `availability(sku, array of store ids[, query string object])`\nThis method supports an optional third parameter that represents extra attributes, such as `show`, to be added to the query string sent to the API.\n##### Using Callbacks\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.availability(4312001, [611, 482], function(err, data) {\n        if (err) console.warn(err);\n        else console.log('Stores carrying %s: %d', data.products[0].name, data.products[0].stores.length);\n    });\n```\n##### Using Promises\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.availability(4312001, [611, 482])\n      .then(function(data){\n        console.log('Stores carrying %s: %d', data.products[0].name, data.products[0].stores.length);\n      })\n      .catch(function(err){\n        console.warn(err);\n      });\n```\n\n### categories\n#### `categories(String of search criteria[, query string object])`\nThis endpoint serves the search criteria for querying the [Category API as described in our API documentation](https://developer.bestbuy.com/documentation/categories-api).\n\nThe below example returns the first category with the word \"music\" in it.\n##### Using Callbacks\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.categories('(name=Music)', {pageSize: 1}, function(err, data) {\n      if (err) console.warn(err);\n      else if (data.total === 0) console.log('No categories found');\n      else console.log('Found %d categories. First category (%s): %s', data.total, data.categories[0].id, data.categories[0].name);\n    });\n```\n##### Using Promises\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.categories('(name=Music)', {pageSize: 1})\n      .then(function(data){\n        if (data.total === 0) console.log('No categories found');\n        else console.log('Found %d categories. First category (%s): %s', data.total, data.categories[0].id, data.categories[0].name);\n      })\n      .catch(function(err){\n        console.warn(err);\n      });\n```\n\n### openBox\n#### `openBox(sku, array of store ids)`\nThis endpoint serves the search criteria for querying the [Buying Options API as described in our API documentation](https://developer.bestbuy.com/documentation/buyingOptions-api).\n\nThis example searches all open box products in the video games category, and returns the first result.\n##### Using Callbacks\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.openBox('categoryId=abcat0700000', function(err, data) {\n      if (err) console.warn(err);\n      else if (data.metadata.resultSet.count === 0) console.log('No Open Box products available');\n      else {\n        console.log('Found %d Open Box products', data.metadata.resultSet.count);\n        console.log('First Open Box product:');\n        console.log('\\tName: %s', data.results[0].names.title);\n        console.log('\\tURL: %s', data.results[0].links.web);\n        console.log('\\tPrice: $%d', data.results[0].prices.current);\n      }\n    });\n```\n##### Using Promises\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.openBox('categoryId=abcat0700000')\n      .then(function(data){\n        if (data.metadata.resultSet.count === 0) console.log('No Open Box products available');\n        else {\n          console.log('Found %d Open Box products', data.metadata.resultSet.count);\n          console.log('First Open Box product:');\n          console.log('\\tName: %s', data.results[0].names.title);\n          console.log('\\tURL: %s', data.results[0].links.web);\n          console.log('\\tPrice: $%d', data.results[0].prices.current);\n        }\n      })\n      .catch(function(data){\n        console.warn(err);\n      });\n```\n\n### products\n#### `products(String of search criteria[, query string object])`\nThis endpoint serves the search criteria for querying the [Products API as described in our API documentation](https://developer.bestbuy.com/documentation/products-api).\n\nThe below example returns the title and price of the first search result with the word \"Mario\" in it.\n##### Using Callbacks\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.products('(search=mario)', {show: 'salePrice,name', pageSize: 1}, function(err, data) {\n      if (err) console.warn(err);\n      else if (data.total === 0) console.log('No products found');\n      else console.log('Found %d products. First match \"%s\" is $%d', data.total, data.products[0].name, data.products[0].salePrice);\n    });\n```\n##### Using Promises\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.products('(search=mario)', {show: 'salePrice,name', pageSize: 1})\n      .then(function(data){\n        if (data.total === 0) console.log('No products found');\n        else console.log('Found %d products. First match \"%s\" is $%d', data.total, data.products[0].name, data.products[0].salePrice);\n      })\n      .catch(function(err){\n        console.warn(err);\n      });\n```\n\n### recommendations\n#### `recommendations('mostViewed' OR 'trendingViewed'[, optional category as a string])`\n#### `recommendations('alsoViewed', sku)`\nThis endpoint serves the search criteria for querying the [Recommendations API as described in our API documentation](https://developer.bestbuy.com/documentation/recommendations-api).\n\nThe first parameter expects one of three values: mostViewed, trendingViewed or alsoViewed.\nIf the first parameter is *mostViewed* or *trendingViewed*, an optional second parameter of a categoryId may be provided.\nIf the first parameter is *alsoViewed*, a required second parameter of sku must be provided.\n\nThe below examples show how to get the most viewed products on BestBuy.com.\n##### Using Callbacks\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.recommendations('mostViewed', function(err, data) {\n      if (err) console.warn(err);\n      else if (data.metadata.resultSet.count === 0) console.log('Did not find any products');\n      else console.log('Found %d products. First product: %s', data.metadata.resultSet.count, data.results[0].names.title);\n    });\n```\n##### Using Promises\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.recommendations('mostViewed')\n      .then(function(data){\n        if (data.metadata.resultSet.count === 0) console.log('Did not find any products');\n        else console.log('Found %d products. First product: %s', data.metadata.resultSet.count, data.results[0].names.title);\n      })\n      .catch(function(err){\n        console.warn(err);\n      });\n```\n\n### reviews\n#### `reviews(String of search criteria)`\nThis endpoint serves the search criteria for querying the [Reviews API as described in our API documentation](https://developer.bestbuy.com/documentation/reviews-api).\n\nThe below examples show finding the reviews for a specific product.\n##### Using Callbacks\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.reviews('sku=4312001', function(err, data) {\n      if (err) console.warn(err);\n      else if (data.total === 0) console.log('No reviews found');\n      else console.log('Found %d reviews, first review: %s', data.total, data.reviews[0].comment);\n    });\n```\n##### Using Promises\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.reviews('sku=4312001')\n      .then(function(data){\n        if (data.total === 0) console.log('No reviews found');\n        else console.log('Found %d reviews, first review: %s', data.total, data.reviews[0].comment);\n      })\n      .catch(function(err){\n        console.warn(err);\n      });\n```\n\n### stores\n#### `stores(String of search criteria)`\nThis endpoint serves the search criteria for querying the [Stores API as described in our API documentation](https://developer.bestbuy.com/documentation/stores-api).\n\nThe below examples show the number of stores located within 25 miles of 94103 (San Francisco, CA).\n##### Using Callbacks\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.stores('area(94103,25)&storeType=BigBox', function(err, data){\n      if (err) console.warn(err);\n      else console.log('Number of stores found: ' + data.total);\n    });\n```\n##### Using Promises\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.stores('area(94103,25)&storeType=BigBox')\n      .then(function(data){\n        console.log('Number of stores found: ' + data.total);\n      })\n      .catch(function(err){\n        console.warn(err);\n      });\n```\n\n### warranties\n#### `warranties(sku)`\nThis endpoint serves warranties for a specified product per the [Warranties API as described in our API documentation](https://developer.bestbuy.com/documentation/stores-api).\n\nThe below examples show warranties for an old printer.\n##### Using Callbacks\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.warranties(6354884, function(err, data){\n      if (err) console.warn(err);\n      else console.log('Warranties found: ' + data.length);\n    });\n```\n##### Using Promises\n```js\n    var bby = require('bestbuy')('YOURKEY');\n    bby.warranties(6354884)\n      .then(function(data){\n        console.log('Warranties found: ' + data.length);\n      })\n      .catch(function(err){\n        console.warn(err);\n      });\n```\n\n## Tests\nRun the existing tests with:\n```bash\n    npm test\n```\nNote that this uses nock fixtures to mock all network calls.\n\nRun tests against the live API (BBY_API_KEY env var needs to be set):\n```bash\n    npm run test-live\n```\n\nIf tests are added, re-record the mock fixtures:\n```\n   npm run record\n   # tests will run against the live API and their output will be saved in test/fixtures\n```\n\n\n## Online Resources\n - [Best Buy Developer Portal](https://developer.bestbuy.com)\n - [Best Buy API Query Builder](https://github.com/BestBuyAPIs/bby-query-builder)\n - [Best Buy API Sample App](https://github.com/BestBuyAPIs/bestbuy-sdk-js-sample-app)\n\n\n## LICENSE\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/BestBuyAPIs/bestbuy-sdk-js.git"
  },
  "scripts": {
    "coverage": "istanbul cover tape test/*.test.js",
    "coveralls": "cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
    "record": "rm -rf test/fixtures/*.json && NOCK_BACK_MODE=record npm test",
    "test": "tape test/*.test.js | tap-spec && semistandard ",
    "test-live": "NOCK_BACK_MODE=wild npm test"
  },
  "version": "1.1.0"
}
